// Generated from Navi.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,24,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
1,16,1,16,3,16,106,8,16,1,16,1,16,3,16,110,8,16,1,16,1,16,3,16,114,8,16,
1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,3,18,125,8,18,1,18,1,18,1,18,
4,18,130,8,18,11,18,12,18,131,3,18,134,8,18,1,18,1,18,3,18,138,8,18,1,18,
3,18,141,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,153,
8,18,1,19,1,19,1,19,1,19,5,19,159,8,19,10,19,12,19,162,9,19,1,19,1,19,1,
20,1,20,1,20,5,20,169,8,20,10,20,12,20,172,9,20,3,20,174,8,20,1,21,1,21,
1,22,1,22,5,22,180,8,22,10,22,12,22,183,9,22,1,23,4,23,186,8,23,11,23,12,
23,187,1,23,1,23,1,24,1,24,1,24,1,24,5,24,196,8,24,10,24,12,24,199,9,24,
1,24,1,24,1,25,1,25,1,25,1,25,5,25,207,8,25,10,25,12,25,210,9,25,1,25,1,
25,1,25,1,25,1,25,1,208,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,
45,21,47,22,49,23,51,24,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
45,3,0,0,31,34,34,92,92,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,102,
2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,232,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,
0,0,0,11,63,1,0,0,0,13,65,1,0,0,0,15,68,1,0,0,0,17,70,1,0,0,0,19,72,1,0,
0,0,21,74,1,0,0,0,23,76,1,0,0,0,25,82,1,0,0,0,27,89,1,0,0,0,29,95,1,0,0,
0,31,98,1,0,0,0,33,100,1,0,0,0,35,117,1,0,0,0,37,152,1,0,0,0,39,154,1,0,
0,0,41,173,1,0,0,0,43,175,1,0,0,0,45,177,1,0,0,0,47,185,1,0,0,0,49,191,1,
0,0,0,51,202,1,0,0,0,53,54,5,61,0,0,54,2,1,0,0,0,55,56,5,40,0,0,56,4,1,0,
0,0,57,58,5,41,0,0,58,6,1,0,0,0,59,60,5,123,0,0,60,8,1,0,0,0,61,62,5,44,
0,0,62,10,1,0,0,0,63,64,5,125,0,0,64,12,1,0,0,0,65,66,5,61,0,0,66,67,5,62,
0,0,67,14,1,0,0,0,68,69,5,46,0,0,69,16,1,0,0,0,70,71,5,38,0,0,71,18,1,0,
0,0,72,73,5,124,0,0,73,20,1,0,0,0,74,75,5,58,0,0,75,22,1,0,0,0,76,77,5,97,
0,0,77,78,5,108,0,0,78,79,5,105,0,0,79,80,5,97,0,0,80,81,5,115,0,0,81,24,
1,0,0,0,82,83,5,115,0,0,83,84,5,116,0,0,84,85,5,114,0,0,85,86,5,117,0,0,
86,87,5,99,0,0,87,88,5,116,0,0,88,26,1,0,0,0,89,90,5,109,0,0,90,91,5,97,
0,0,91,92,5,116,0,0,92,93,5,99,0,0,93,94,5,104,0,0,94,28,1,0,0,0,95,96,5,
97,0,0,96,97,5,115,0,0,97,30,1,0,0,0,98,99,5,95,0,0,99,32,1,0,0,0,100,101,
5,105,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,105,1,0,0,0,104,106,3,
47,23,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,109,5,40,0,0,
108,110,3,47,23,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,113,
3,35,17,0,112,114,3,47,23,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,1,0,
0,0,115,116,5,41,0,0,116,34,1,0,0,0,117,118,3,37,18,0,118,119,5,46,0,0,119,
120,5,46,0,0,120,121,1,0,0,0,121,122,3,37,18,0,122,36,1,0,0,0,123,125,5,
45,0,0,124,123,1,0,0,0,124,125,1,0,0,0,125,126,1,0,0,0,126,133,3,41,20,0,
127,129,5,46,0,0,128,130,7,0,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,
1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,127,1,0,0,0,133,134,1,0,0,0,
134,140,1,0,0,0,135,137,7,1,0,0,136,138,7,2,0,0,137,136,1,0,0,0,137,138,
1,0,0,0,138,139,1,0,0,0,139,141,3,41,20,0,140,135,1,0,0,0,140,141,1,0,0,
0,141,153,1,0,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,153,5,102,0,0,
145,146,5,45,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,153,5,102,0,0,149,
150,5,110,0,0,150,151,5,97,0,0,151,153,5,110,0,0,152,124,1,0,0,0,152,142,
1,0,0,0,152,145,1,0,0,0,152,149,1,0,0,0,153,38,1,0,0,0,154,160,5,34,0,0,
155,159,8,3,0,0,156,157,5,92,0,0,157,159,8,4,0,0,158,155,1,0,0,0,158,156,
1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,
162,160,1,0,0,0,163,164,5,34,0,0,164,40,1,0,0,0,165,174,5,48,0,0,166,170,
7,5,0,0,167,169,7,0,0,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,
170,171,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,173,165,1,0,0,0,173,166,
1,0,0,0,174,42,1,0,0,0,175,176,7,6,0,0,176,44,1,0,0,0,177,181,7,7,0,0,178,
180,7,8,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
0,0,182,46,1,0,0,0,183,181,1,0,0,0,184,186,7,9,0,0,185,184,1,0,0,0,186,187,
1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,6,23,0,0,
190,48,1,0,0,0,191,192,5,47,0,0,192,193,5,47,0,0,193,197,1,0,0,0,194,196,
8,4,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,
198,200,1,0,0,0,199,197,1,0,0,0,200,201,6,24,0,0,201,50,1,0,0,0,202,203,
5,47,0,0,203,204,5,42,0,0,204,208,1,0,0,0,205,207,9,0,0,0,206,205,1,0,0,
0,207,210,1,0,0,0,208,209,1,0,0,0,208,206,1,0,0,0,209,211,1,0,0,0,210,208,
1,0,0,0,211,212,5,42,0,0,212,213,5,47,0,0,213,214,1,0,0,0,214,215,6,25,0,
0,215,52,1,0,0,0,18,0,105,109,113,124,131,133,137,140,152,158,160,170,173,
181,187,197,208,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "'('", "')'", "'{'", "','", "'}'", 
                         "'=>'", "'.'", "'&'", "'|'", "':'", "'alias'", 
                         "'struct'", "'match'", "'as'", "'_'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, "Alias", "Struct", "Match", 
                          "As", "Discard", "IntInterval", "Interval", "Number", 
                          "String", "Identifier", "Space", "LineComment", 
                          "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "Alias", "Struct", 
                      "Match", "As", "Discard", "IntInterval", "Interval", 
                      "Number", "String", "DIGITS", "HEX", "Identifier", 
                      "Space", "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.Alias = 12;
NaviLexer.Struct = 13;
NaviLexer.Match = 14;
NaviLexer.As = 15;
NaviLexer.Discard = 16;
NaviLexer.IntInterval = 17;
NaviLexer.Interval = 18;
NaviLexer.Number = 19;
NaviLexer.String = 20;
NaviLexer.Identifier = 21;
NaviLexer.Space = 22;
NaviLexer.LineComment = 23;
NaviLexer.BlockComment = 24;



