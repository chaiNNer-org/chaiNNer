// Generated from Navi.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,114,8,18,1,18,1,18,
3,18,118,8,18,1,18,1,18,3,18,122,8,18,1,18,1,18,1,19,3,19,127,8,19,1,19,
1,19,1,19,1,19,3,19,133,8,19,1,20,3,20,136,8,20,1,20,1,20,1,20,4,20,141,
8,20,11,20,12,20,142,3,20,145,8,20,1,20,1,20,3,20,149,8,20,1,20,3,20,152,
8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,164,8,20,1,21,
1,21,1,21,1,21,5,21,170,8,21,10,21,12,21,173,9,21,1,21,1,21,1,22,1,22,1,
22,5,22,180,8,22,10,22,12,22,183,9,22,3,22,185,8,22,1,23,1,23,1,24,1,24,
5,24,191,8,24,10,24,12,24,194,9,24,1,25,4,25,197,8,25,11,25,12,25,198,1,
25,1,25,1,26,1,26,1,26,1,26,5,26,207,8,26,10,26,12,26,210,9,26,1,26,1,26,
1,27,1,27,1,27,1,27,5,27,218,8,27,10,27,12,27,221,9,27,1,27,1,27,1,27,1,
27,1,27,1,219,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,0,47,0,
49,23,51,24,53,25,55,26,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
45,3,0,0,31,34,34,92,92,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,102,
2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,245,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,49,1,0,0,0,
0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,
0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,
0,17,74,1,0,0,0,19,76,1,0,0,0,21,78,1,0,0,0,23,80,1,0,0,0,25,82,1,0,0,0,
27,85,1,0,0,0,29,89,1,0,0,0,31,93,1,0,0,0,33,99,1,0,0,0,35,106,1,0,0,0,37,
108,1,0,0,0,39,126,1,0,0,0,41,163,1,0,0,0,43,165,1,0,0,0,45,184,1,0,0,0,
47,186,1,0,0,0,49,188,1,0,0,0,51,196,1,0,0,0,53,202,1,0,0,0,55,213,1,0,0,
0,57,58,5,59,0,0,58,2,1,0,0,0,59,60,5,61,0,0,60,4,1,0,0,0,61,62,5,40,0,0,
62,6,1,0,0,0,63,64,5,41,0,0,64,8,1,0,0,0,65,66,5,123,0,0,66,10,1,0,0,0,67,
68,5,44,0,0,68,12,1,0,0,0,69,70,5,125,0,0,70,14,1,0,0,0,71,72,5,61,0,0,72,
73,5,62,0,0,73,16,1,0,0,0,74,75,5,46,0,0,75,18,1,0,0,0,76,77,5,38,0,0,77,
20,1,0,0,0,78,79,5,124,0,0,79,22,1,0,0,0,80,81,5,58,0,0,81,24,1,0,0,0,82,
83,5,97,0,0,83,84,5,115,0,0,84,26,1,0,0,0,85,86,5,100,0,0,86,87,5,101,0,
0,87,88,5,102,0,0,88,28,1,0,0,0,89,90,5,108,0,0,90,91,5,101,0,0,91,92,5,
116,0,0,92,30,1,0,0,0,93,94,5,109,0,0,94,95,5,97,0,0,95,96,5,116,0,0,96,
97,5,99,0,0,97,98,5,104,0,0,98,32,1,0,0,0,99,100,5,115,0,0,100,101,5,116,
0,0,101,102,5,114,0,0,102,103,5,117,0,0,103,104,5,99,0,0,104,105,5,116,0,
0,105,34,1,0,0,0,106,107,5,95,0,0,107,36,1,0,0,0,108,109,5,105,0,0,109,110,
5,110,0,0,110,111,5,116,0,0,111,113,1,0,0,0,112,114,3,51,25,0,113,112,1,
0,0,0,113,114,1,0,0,0,114,115,1,0,0,0,115,117,5,40,0,0,116,118,3,51,25,0,
117,116,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,121,3,39,19,0,120,122,
3,51,25,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,41,0,
0,124,38,1,0,0,0,125,127,3,41,20,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,
1,0,0,0,128,129,5,46,0,0,129,130,5,46,0,0,130,132,1,0,0,0,131,133,3,41,20,
0,132,131,1,0,0,0,132,133,1,0,0,0,133,40,1,0,0,0,134,136,5,45,0,0,135,134,
1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,144,3,45,22,0,138,140,5,46,0,
0,139,141,7,0,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,
1,0,0,0,143,145,1,0,0,0,144,138,1,0,0,0,144,145,1,0,0,0,145,151,1,0,0,0,
146,148,7,1,0,0,147,149,7,2,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,
1,0,0,0,150,152,3,45,22,0,151,146,1,0,0,0,151,152,1,0,0,0,152,164,1,0,0,
0,153,154,5,105,0,0,154,155,5,110,0,0,155,164,5,102,0,0,156,157,5,45,0,0,
157,158,5,105,0,0,158,159,5,110,0,0,159,164,5,102,0,0,160,161,5,110,0,0,
161,162,5,97,0,0,162,164,5,110,0,0,163,135,1,0,0,0,163,153,1,0,0,0,163,156,
1,0,0,0,163,160,1,0,0,0,164,42,1,0,0,0,165,171,5,34,0,0,166,170,8,3,0,0,
167,168,5,92,0,0,168,170,8,4,0,0,169,166,1,0,0,0,169,167,1,0,0,0,170,173,
1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,
174,175,5,34,0,0,175,44,1,0,0,0,176,185,5,48,0,0,177,181,7,5,0,0,178,180,
7,0,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,
182,185,1,0,0,0,183,181,1,0,0,0,184,176,1,0,0,0,184,177,1,0,0,0,185,46,1,
0,0,0,186,187,7,6,0,0,187,48,1,0,0,0,188,192,7,7,0,0,189,191,7,8,0,0,190,
189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,50,1,0,0,
0,194,192,1,0,0,0,195,197,7,9,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,
1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,6,25,0,0,201,52,1,0,0,0,
202,203,5,47,0,0,203,204,5,47,0,0,204,208,1,0,0,0,205,207,8,4,0,0,206,205,
1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,
210,208,1,0,0,0,211,212,6,26,0,0,212,54,1,0,0,0,213,214,5,47,0,0,214,215,
5,42,0,0,215,219,1,0,0,0,216,218,9,0,0,0,217,216,1,0,0,0,218,221,1,0,0,0,
219,220,1,0,0,0,219,217,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,
5,42,0,0,223,224,5,47,0,0,224,225,1,0,0,0,225,226,6,27,0,0,226,56,1,0,0,
0,20,0,113,117,121,126,132,135,142,144,148,151,163,169,171,181,184,192,198,
208,219,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'('", "')'", "'{'", "','", 
                         "'}'", "'=>'", "'.'", "'&'", "'|'", "':'", "'as'", 
                         "'def'", "'let'", "'match'", "'struct'", "'_'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, "As", "Def", "Let", 
                          "Match", "Struct", "Discard", "IntInterval", "Interval", 
                          "Number", "String", "Identifier", "Space", "LineComment", 
                          "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "As", "Def", 
                      "Let", "Match", "Struct", "Discard", "IntInterval", 
                      "Interval", "Number", "String", "DIGITS", "HEX", "Identifier", 
                      "Space", "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.As = 13;
NaviLexer.Def = 14;
NaviLexer.Let = 15;
NaviLexer.Match = 16;
NaviLexer.Struct = 17;
NaviLexer.Discard = 18;
NaviLexer.IntInterval = 19;
NaviLexer.Interval = 20;
NaviLexer.Number = 21;
NaviLexer.String = 22;
NaviLexer.Identifier = 23;
NaviLexer.Space = 24;
NaviLexer.LineComment = 25;
NaviLexer.BlockComment = 26;



